# Generated by Django 4.2.4 on 2023-09-01 05:19

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('jwt_token', models.CharField(max_length=250, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Enter name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone_number', models.IntegerField(verbose_name='Phone Number')),
                ('message', models.CharField(max_length=1000, verbose_name='Message')),
            ],
            options={
                'db_table': 'Contact Us',
            },
        ),
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='Parking Image Lot Picture')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('parking_type', models.CharField(choices=[('INDOOR', 'Indoor'), ('OUTDOOR', 'Outdoor')], max_length=20, verbose_name='Parking Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ParkingLot',
            },
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Subscriber Email')),
            ],
            options={
                'db_table': 'Subscriber',
            },
        ),
        migrations.CreateModel(
            name='ParkingSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_number', models.CharField(max_length=10)),
                ('is_available', models.BooleanField(default=True)),
                ('parking_slot_type', models.CharField(choices=[('Two Wheeler', 'Two Wheeler'), ('Four Wheeler', 'Four Wheeler'), ('Heavy Vechiles', 'Heavy Vechiles')], max_length=30, verbose_name='Parking Slot Type')),
                ('parking_lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking_app.parkinglot')),
            ],
            options={
                'db_table': 'ParkingSlot',
            },
        ),
        migrations.CreateModel(
            name='ParkingRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(choices=[('Two Wheeler', 'Two Wheeler'), ('Four Wheeler', 'Four Wheeler'), ('Heavy Vechiles', 'Heavy Vechiles')], max_length=20)),
                ('upto_1_hr', models.IntegerField(verbose_name='Fare Per Hour')),
                ('above_1_hr_upto_5_hr', models.IntegerField(verbose_name='Fare Above 1 hour and upto 5 hours')),
                ('above_5_hr_and_upto_24_hr', models.IntegerField(verbose_name='Fare above 5 day and upto 1 Day')),
                ('above_1_day_and_upto_3_days', models.IntegerField(verbose_name='Fare above 1 day and upto 3 days')),
                ('above_3_days_and_upto_7_days', models.IntegerField(verbose_name='Fare above 3 days and upto 7 days')),
                ('above_1_week_and_upto_2_weeks', models.IntegerField(verbose_name='Fare above 1 weeks and upto 2 weeks')),
                ('above_2_week_and_upto_1_month', models.IntegerField(verbose_name='Fare above 2 weeks and upto 1 month')),
                ('parking_lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking_app.parkinglot')),
            ],
            options={
                'db_table': 'Parking Rates',
            },
        ),
        migrations.CreateModel(
            name='ParkingBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_number', models.CharField(max_length=20, null=True)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('elapsed_time', models.CharField(blank=True, max_length=20, null=True)),
                ('total_cost', models.DecimalField(decimal_places=3, max_digits=10)),
                ('parking_slot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='parking_app.parkingslot')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ParkingBilling',
            },
        ),
        migrations.CreateModel(
            name='FinalBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_number', models.CharField(max_length=20, null=True)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('elapsed_time', models.CharField(blank=True, max_length=20, null=True)),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('parking_slot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='parking_app.parkingslot')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Final Billing',
            },
        ),
    ]
